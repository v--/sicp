#lang sicp

; Exercise 1.15
;
; The sine of an angle (specified in radians) can be computed by making use of the approximation
; sin(x) ~ x if x is sufficiently small, and the trigonometric identity
;
; sin(r) = 3 * sin(r / 3) - 4 * sin^3(r / 3)
;
; to reduce the size of the argument of sin.
; (For purposes of this exercise an angle is considered "sufficiently small" if its magnitude is not greater than 0.1 radians.)
; These ideas are incorporated in the following procedures:

(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))

; a.  How many times is the procedure p applied when (sine 12.15) is evaluated?
;
; b.  What is the order of growth in space and number of steps (as a function of a)
; used by the process generated by the sine procedure when (sine a) is evaluated?

; Solution
; In order to determine the number of applications of p, we use substitution

(#%require rackunit)

(define-simple-check (check-value x) (= x (sine 12.15)))

(check-value (sine 12.15))
(check-value (p (sine 4.05)))
(check-value (p (p (sine 1.35))))
(check-value (p (p (p (sine 0.45)))))
(check-value (p (p (p (p (sine 0.15))))))
(check-value (p (p (p (p (p (sine 0.05)))))))
(check-value (p (p (p (p (p 0.05))))))

; p is applied 5 times, because 12.15 needs to be divided by 3 5 times
; before the resulting value is less than 0.1. This leads to the following time complexity formula:
;
;   T(a) = ceiling(log_3(a / t)),
;
; where t = 0.1 is the tolerance.
; This means that the sine procedure has logarithmic time complexity (T(a) ~ log(a)).

(define (t a)
  (inexact->exact (ceiling (/ (log (/ 12.15 0.1)) (log 3)))))

(check-equal? (t 12.15) 5)

; The space complexity S(a) is also logarithmic, because the process is recursive
; and the only recurring procedure, p, is invoked at most T(a) times.
